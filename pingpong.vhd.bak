library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity pingpong is 
	port(
	      clk,reset,A:in std_logic;
	      L:out std_logic_vector(9 downto 0)
			);
end pingpong;

architecture pingpong of pingpong is
type state is (s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19);
signal present_state: state;
signal next_state : state;
signal cnt:std_logic_vector(24 downto 0);
siganl clk2hz:std_logic;
begin			

	process(clk)
	begin
			if clk'event and clk = '1' then
				if cnt =  "1011111010111100001000000" then
				   cnt <= "0000000000000000000000000";
				else 
					cnt <= cnt + 1;
				end if;
			end if;
	end process;

clk2hz <= cnt(24);

		process(clk2hz,reset)
		begin
				if reset = '0' then
					present_state <= s0;
				elsif clk2hz'event and clk2hz = '1' then
					present-state <= next_state;
				end if;
		end process;

		process(present_state,A)
		begin
				case present_state is
					when s0 =>
							if A = '0' then
								next_state <= s1;
							else
						      nest_state <= s0;
							end if;
							L <= "0000000000";
					when s1 =>
							next_state <= s2;
							L <= "0000000001";
					when s2 =>
							next_state <= s3;
							L <= "0000000010";
					when s3 =>
							next_state <= s4;
							L <= "0000000100";
					when s4 =>
							next_state <= s5;
							L <= "0000001000";
					when s5 =>
							next_state <= s6;
							L <= "0000010000";
					when s6 =>
							next_state <= s7;
							L <= "0000100000";
					when s7 =>
							next_state <= s8;
							L <= "0001000000";
					when s8 =>
							next_state <= s9;
							L <= "0010000000";
					when s9 =>
							next_state <= s10;
							L <= "0100000000";
					when s10 =>
							next_state <= s11;
							L <= "1000000000";
					when s11 =>
							next_state <= s12;
							L <= "0100000000";
					when s12 =>
							next_state <= s13;
							L <= "0010000000";
					when s13 =>
							next_state <= s14;
							L <= "0001000000";
					when s14 =>
							next_state <= s15;
							L <= "0000100000";
					when s15 =>
							next_state <= s16;
							L <= "0000010000";
					when s16 =>
							next_state <= s17;
							L <= "0000001000";							
					when s17 =>
							next_state <= s18;
							L <= "0000000100";	
					when s18 =>
					      if A = '0' then
							   next_state <= s0;
							else
								next_state <= s19;
							L <= "0000000010";	
					when s19 =>
					      if A = '0' then
							   next_state <= s2;
							else
								next_state <= s0;
							L <= "0000000001";									
				  end case;
			end process;
			



end pingpong;